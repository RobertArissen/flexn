import { ScreenStates, ForbiddenFocusDirections } from '../types';

import AbstractFocusModel from './AbstractFocusModel';
import View from './view';
export declare const STATE_BACKGROUND: ScreenStates;
export declare const STATE_FOREGROUND: ScreenStates;
declare const ALIGNMENT_BOTH_EDGE = "bot-edge";
declare const ALIGNMENT_LOW_EDGE = "low-edge";
declare class Screen extends AbstractFocusModel {
    _type: string;
    private _state;
    private _prevState;
    private _verticalWindowAlignment;
    private _horizontalWindowAlignment;
    private _order;
    private _focusKey;
    private _horizontalViewportOffset;
    private _verticalViewportOffset;
    private _forbiddenFocusDirections;
    private _initialLoadInProgress;
    private _componentsPendingLayoutMap;
    private _unmountingComponents;
    private _preferredFocus?;
    private _currentFocus?;
    private _precalculatedFocus?;
    private _stealFocus;
    private _isFocused;
    private _repeatContext;
    private _onFocus?;
    private _onBlur?;
    constructor(params: any);
    addComponentToPendingLayoutMap(id: string): void;
    removeComponentFromPendingLayoutMap(id: string): void;
    setFocus(cls?: AbstractFocusModel): void;
    onViewRemoved(cls: View): void;
    getFirstFocusableOnScreen: () => AbstractFocusModel | undefined;
    private precalculateFocus;
    getType(): string;
    setScreen(_cls: AbstractFocusModel): this;
    getScreen(): undefined;
    getState(): typeof STATE_BACKGROUND | typeof STATE_FOREGROUND;
    setState(value: typeof STATE_BACKGROUND | typeof STATE_FOREGROUND): this;
    isInBackground(): boolean;
    isInForeground(): boolean;
    setPrevState(value: typeof STATE_BACKGROUND | typeof STATE_FOREGROUND): this;
    isPrevStateBackground(): boolean;
    getVerticalWindowAlignment(): typeof ALIGNMENT_BOTH_EDGE | typeof ALIGNMENT_LOW_EDGE;
    getHorizontalWindowAlignment(): typeof ALIGNMENT_BOTH_EDGE | typeof ALIGNMENT_LOW_EDGE;
    setOrder(value: number): this;
    getOrder(): number;
    getFocusKey(): string;
    getHorizontalViewportOffset(): number;
    getVerticalViewportOffset(): number;
    getForbiddenFocusDirections(): ForbiddenFocusDirections[];
    setInitialLoadInProgress(value: boolean): this;
    isInitialLoadInProgress(): boolean;
    getChildren(): AbstractFocusModel[];
    getParent(): AbstractFocusModel | undefined;
    setPreferredFocus(cls: View): this;
    getPreferredFocus(): View | undefined;
    setPrecalculatedFocus(cls: View): this;
    setCurrentFocus(cls: View): this;
    getCurrentFocus(): View | undefined;
    getPrecalculatedFocus(): View | undefined;
    setIsFocused(isFocused: boolean): this;
    getIsFocused(): boolean;
    isFocusable(): boolean;
    getRepeatContext(): {
        parentContext: AbstractFocusModel;
        index: number;
    } | undefined;
    hasStealFocus(): boolean;
    isScreen(): boolean;
    onFocus(): void;
    onBlur(): void;
    setRepeatContext(_value: any): this;
}
export default Screen;
//# sourceMappingURL=screen.d.ts.map